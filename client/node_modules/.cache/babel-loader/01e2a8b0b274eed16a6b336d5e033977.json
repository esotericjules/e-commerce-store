{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/study-projects/clothing-store/src/pages/shop/shop.components.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsStartAsync, updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selector\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    /* OBSERVABLE PATTERN */\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //  const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //  // console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //  this.setState({loading: false})\n    // })\n\n    /* API Call pattern */\n    // fetch(\"https://firestore.googleapis.com/v1/projects/clothing-store-bdf48/databases/(default)/documents/collections\")\n    //   .then(response => response.json())\n    //   .then(collections => console.log(collections))\n    //\n\n    /* promise pattern */\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false})\n    // })\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 64\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 74\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mac/Documents/study-projects/clothing-store/src/pages/shop/shop.components.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","updateCollections","WithSpinner","createStructuredSelector","selectIsCollectionFetching","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","collectionRef","collection","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,0BAAR,EAAoCC,iBAApC,QAA4D,+BAA5D;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,0BAAR,QAAyC,gCAAzC;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACN,mBAAD,CAAlD;AACA,MAAMU,yBAAyB,GAAGJ,WAAW,CAACL,cAAD,CAA7C;;AAEA,MAAMU,QAAN,SAAuBd,KAAK,CAACe,SAA7B,CAAuC;AAErCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACR,MAAAA;AAAD,QAAsB,KAAKS,KAAjC;AACA,UAAMC,aAAa,GAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgC,KAAKL,KAA3C;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEI,KAAK,CAACE,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGN,KAAD,iBAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEK;AAA3C,SAAqEL,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAQ,MAAA,IAAI,EAAG,GAAEI,KAAK,CAACE,IAAK,gBAA5B;AAA8C,MAAA,MAAM,EAAGN,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEK;AAAtC,SAAgEL,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AApCoC;;AAsCvC,MAAMO,eAAe,GAAGd,wBAAwB,CAAC;AAC/CY,EAAAA,oBAAoB,EAAEX;AADyB,CAAD,CAAhD;;AAIA,MAAMc,kBAAkB,GAAGC,QAAQ,KAAK;AACrCnB,EAAAA,0BAA0B,EAAE,MAAMmB,QAAQ,CAACnB,0BAA0B,EAA3B;AADL,CAAL,CAAnC;;AAIA,eAAeL,OAAO,CAACsB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CX,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nimport {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsStartAsync, updateCollections} from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport {createStructuredSelector} from \"reselect\";\nimport {selectIsCollectionFetching} from \"../../redux/shop/shop.selector\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  \n  componentDidMount() {\n    const {updateCollections} = this.props;\n    const collectionRef = firestore.collection('collections');\n    \n    /* OBSERVABLE PATTERN */\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //  const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //  // console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //  this.setState({loading: false})\n    // })\n    \n    /* API Call pattern */\n    // fetch(\"https://firestore.googleapis.com/v1/projects/clothing-store-bdf48/databases/(default)/documents/collections\")\n    //   .then(response => response.json())\n    //   .then(collections => console.log(collections))\n    //\n  \n    /* promise pattern */\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false})\n    // })\n  }\n  \n  render() {\n    const {match, isCollectionFetching} = this.props;\n    return (\n      <div>\n        <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props}  />}/>\n        <Route  path={`${match.path}/:collectionId`}  render={(props) => <CollectionPageWithSpinner isLoading={isCollectionFetching} {...props}  />} />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n   fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}