{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/study-projects/clothing-store/src/pages/shop/shop.components.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\"; // import {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\";\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selector\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const collectionRef = firestore.collection('collections');\n\n    /* OBSERVABLE PATTERN */\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //  const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //  // console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //  this.setState({loading: false})\n    // })\n\n    /* API Call pattern */\n    // fetch(\"https://firestore.googleapis.com/v1/projects/clothing-store-bdf48/databases/(default)/documents/collections\")\n    //   .then(response => response.json())\n    //   .then(collections => console.log(collections))\n    //\n\n    /* promise pattern */\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false})\n    // })\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 64\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 74\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mac/Documents/study-projects/clothing-store/src/pages/shop/shop.components.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","WithSpinner","createStructuredSelector","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B,C,CACA;;AACA,SAAQC,0BAAR,QAAyC,+BAAzC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,0BAAR,EAAoCC,yBAApC,QAAoE,gCAApE;AAEA,MAAMC,8BAA8B,GAAGJ,WAAW,CAACH,mBAAD,CAAlD;AACA,MAAMQ,yBAAyB,GAAGL,WAAW,CAACF,cAAD,CAA7C;;AAEA,MAAMQ,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAErCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACT,MAAAA;AAAD,QAA+B,KAAKU,KAA1C;AAEAV,IAAAA,0BAA0B,GAHR,CAQlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,oBAAR;AAA8BC,MAAAA;AAA9B,QAAqD,KAAKJ,KAAhE;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGL,KAAD,iBAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEG;AAA3C,SAAqEH,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAQ,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBAA5B;AAA8C,MAAA,MAAM,EAAGL,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,CAACI;AAAvC,SAAgEJ,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AA1CoC;;AA4CvC,MAAMM,eAAe,GAAGd,wBAAwB,CAAC;AAC/CW,EAAAA,oBAAoB,EAAEV,0BADyB;AAE/CW,EAAAA,mBAAmB,EAAEV;AAF0B,CAAD,CAAhD;;AAKA,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACrClB,EAAAA,0BAA0B,EAAE,MAAMkB,QAAQ,CAAClB,0BAA0B,EAA3B;AADL,CAAL,CAAnC;;AAIA,eAAeH,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\n// import {firestore, convertCollectionsSnapshotToMap} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsStartAsync} from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport {createStructuredSelector} from \"reselect\";\nimport {selectIsCollectionFetching, selectIsCollectionsLoaded} from \"../../redux/shop/shop.selector\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  \n  componentDidMount() {\n    const {fetchCollectionsStartAsync} = this.props;\n    \n    fetchCollectionsStartAsync();\n    \n    \n    \n    \n    // const collectionRef = firestore.collection('collections');\n    \n    /* OBSERVABLE PATTERN */\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //  const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //  // console.log(collectionsMap);\n    //   updateCollections(collectionsMap);\n    //  this.setState({loading: false})\n    // })\n    \n    /* API Call pattern */\n    // fetch(\"https://firestore.googleapis.com/v1/projects/clothing-store-bdf48/databases/(default)/documents/collections\")\n    //   .then(response => response.json())\n    //   .then(collections => console.log(collections))\n    //\n  \n    /* promise pattern */\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false})\n    // })\n  }\n  \n  render() {\n    const {match, isCollectionFetching, isCollectionsLoaded} = this.props;\n    return (\n      <div>\n        <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props}  />}/>\n        <Route  path={`${match.path}/:collectionId`}  render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props}  />} />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n   fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}